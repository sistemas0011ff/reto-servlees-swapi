"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RetrievePeopleQueryHandlerToken = exports.RetrievePeopleFromApiUseCaseToken = exports.GetPeopleQueryHandlerToken = exports.PeopleApiClientToken = exports.RetrievePeopleUseCaseToken = exports.IPeopleCreationUseCaseToken = exports.IPeopleRegistryServiceToken = exports.CreatePeopleCommandHandlerToken = exports.PeopleRepositoryToken = exports.RetrievePlanetFromApiUseCaseToken = exports.GetPlanetQueryHandlerToken = exports.PlanetApiClientToken = exports.RetrievePlanetsUseCaseToken = exports.RetrievePlanetsQueryHandlerToken = exports.IPlanetCreationUseCaseToken = exports.IPlanetRegistryServiceToken = exports.CreatePlanetCommandHandlerToken = exports.PlanetRepositoryToken = exports.PrismaClientToken = void 0;
const typedi_1 = require("typedi");
const client_1 = require("@prisma/client");
const PlanetCreationUseCase_1 = require("../../contexts/planets/application/usecases/PlanetCreationUseCase");
const PlanetRegistryService_1 = require("../../contexts/planets/application/services/PlanetRegistryService");
const CreatePlanetCommandHandler_1 = require("../../contexts/planets/application/commands/CreatePlanetCommandHandler");
const RetrievePlanetsUseCase_1 = require("../../contexts/planets/application/usecases/RetrievePlanetsUseCase");
const RetrievePlanetsQueryHandler_1 = require("../../contexts/planets/application/queries/RetrievePlanetsQueryHandler");
const PlanetRepository_1 = require("../../contexts/planets/infraestructure/repositories/PlanetRepository");
const PlanetApiClient_1 = require("../../contexts/planets/infraestructure/api/externalServices/PlanetApiClient");
const GetPlanetQueryHandler_1 = require("../../contexts/planets/application/queries/GetPlanetQueryHandler");
const RetrievePlanetFromApiUseCase_1 = require("../../contexts/planets/application/usecases/RetrievePlanetFromApiUseCase");
const PeopleRegistryService_1 = require("../../contexts/people/application/services/PeopleRegistryService");
const CreatePeopleCommandHandler_1 = require("../../contexts/people/application/commands/CreatePeopleCommandHandler");
const PeopleApiClient_1 = require("../../contexts/people/infraestructure/api/externalServices/PeopleApiClient");
const GetPeopleQueryHandler_1 = require("../../contexts/people/application/queries/GetPeopleQueryHandler");
const PlanetRepository_2 = require("../../contexts/people/infraestructure/repositories/PlanetRepository");
const PlanetCreationUseCase_2 = require("../../contexts/people/application/usecases/PlanetCreationUseCase");
const RetrievePeopleQueryHandler_1 = require("../../contexts/people/application/queries/RetrievePeopleQueryHandler");
const RetrievePlanetsUseCase_2 = require("../../contexts/people/application/usecases/RetrievePlanetsUseCase");
const RetrievePlanetFromApiUseCase_2 = require("../../contexts/people/application/usecases/RetrievePlanetFromApiUseCase");
// Tokens
exports.PrismaClientToken = new typedi_1.Token('PrismaClient');
exports.PlanetRepositoryToken = new typedi_1.Token('PlanetRepository');
exports.CreatePlanetCommandHandlerToken = new typedi_1.Token('CreatePlanetCommandHandler');
exports.IPlanetRegistryServiceToken = new typedi_1.Token('IPlanetRegistryService');
exports.IPlanetCreationUseCaseToken = new typedi_1.Token('IPlanetCreationUseCase');
exports.RetrievePlanetsQueryHandlerToken = new typedi_1.Token('RetrievePlanetsQueryHandler');
exports.RetrievePlanetsUseCaseToken = new typedi_1.Token('RetrievePlanetsUseCase');
exports.PlanetApiClientToken = new typedi_1.Token('IPlanetApiClient');
exports.GetPlanetQueryHandlerToken = new typedi_1.Token('GetPlanetQueryHandler');
exports.RetrievePlanetFromApiUseCaseToken = new typedi_1.Token('RetrievePlanetFromApiUseCase');
// Instanciación y registro de componentes 
const prismaClient = new client_1.PrismaClient();
typedi_1.Container.set(exports.PrismaClientToken, prismaClient);
const swapiBaseUrl = process.env.SWAPI_BASE_URL || "";
typedi_1.Container.set(exports.PlanetApiClientToken, new PlanetApiClient_1.PlanetApiClient(swapiBaseUrl));
typedi_1.Container.set(exports.PlanetRepositoryToken, new PlanetRepository_1.PlanetRepository(prismaClient));
typedi_1.Container.set(exports.CreatePlanetCommandHandlerToken, new CreatePlanetCommandHandler_1.CreatePlanetCommandHandler(typedi_1.Container.get(exports.PlanetRepositoryToken)));
typedi_1.Container.set(exports.IPlanetCreationUseCaseToken, new PlanetCreationUseCase_1.PlanetCreationUseCase(typedi_1.Container.get(exports.CreatePlanetCommandHandlerToken)));
typedi_1.Container.set(exports.RetrievePlanetsQueryHandlerToken, new RetrievePlanetsQueryHandler_1.RetrievePlanetsQueryHandler(typedi_1.Container.get(exports.PlanetRepositoryToken)));
typedi_1.Container.set(exports.RetrievePlanetsUseCaseToken, new RetrievePlanetsUseCase_1.RetrievePlanetsUseCase(typedi_1.Container.get(exports.RetrievePlanetsQueryHandlerToken)));
typedi_1.Container.set(exports.GetPlanetQueryHandlerToken, new GetPlanetQueryHandler_1.GetPlanetQueryHandler(typedi_1.Container.get(exports.PlanetApiClientToken)));
typedi_1.Container.set(exports.RetrievePlanetFromApiUseCaseToken, new RetrievePlanetFromApiUseCase_1.RetrievePlanetFromApiUseCase(typedi_1.Container.get(exports.GetPlanetQueryHandlerToken)));
typedi_1.Container.set(exports.IPlanetRegistryServiceToken, new PlanetRegistryService_1.PlanetRegistryService(typedi_1.Container.get(exports.IPlanetCreationUseCaseToken), typedi_1.Container.get(exports.RetrievePlanetsUseCaseToken), typedi_1.Container.get(exports.RetrievePlanetFromApiUseCaseToken)));
// Tokens para People
exports.PeopleRepositoryToken = new typedi_1.Token('PeopleRepository');
exports.CreatePeopleCommandHandlerToken = new typedi_1.Token('CreatePeopleCommandHandler');
exports.IPeopleRegistryServiceToken = new typedi_1.Token('IPeopleRegistryService');
exports.IPeopleCreationUseCaseToken = new typedi_1.Token('IPeopleCreationUseCase');
exports.RetrievePeopleUseCaseToken = new typedi_1.Token('RetrievePeopleUseCase');
exports.PeopleApiClientToken = new typedi_1.Token('IPeopleApiClient');
exports.GetPeopleQueryHandlerToken = new typedi_1.Token('GetPeopleQueryHandler');
exports.RetrievePeopleFromApiUseCaseToken = new typedi_1.Token('RetrievePeopleFromApiUseCase');
exports.RetrievePeopleQueryHandlerToken = new typedi_1.Token('RetrievePeopleQueryHandler');
// Instanciación y registro de componentes para People
typedi_1.Container.set(exports.PeopleApiClientToken, new PeopleApiClient_1.PeopleApiClient(swapiBaseUrl));
typedi_1.Container.set(exports.PeopleRepositoryToken, new PlanetRepository_2.PeopleRepository(prismaClient));
typedi_1.Container.set(exports.CreatePeopleCommandHandlerToken, new CreatePeopleCommandHandler_1.CreatePeopleCommandHandler(typedi_1.Container.get(exports.PeopleRepositoryToken)));
typedi_1.Container.set(exports.IPeopleCreationUseCaseToken, new PlanetCreationUseCase_2.PeopleCreationUseCase(typedi_1.Container.get(exports.CreatePeopleCommandHandlerToken)));
typedi_1.Container.set(exports.RetrievePeopleQueryHandlerToken, new RetrievePeopleQueryHandler_1.RetrievePeoplesQueryHandler(typedi_1.Container.get(exports.PeopleRepositoryToken)));
typedi_1.Container.set(exports.RetrievePeopleUseCaseToken, new RetrievePlanetsUseCase_2.RetrievePeoplesUseCase(typedi_1.Container.get(exports.RetrievePeopleQueryHandlerToken)));
typedi_1.Container.set(exports.GetPeopleQueryHandlerToken, new GetPeopleQueryHandler_1.GetPeopleQueryHandler(typedi_1.Container.get(exports.PeopleApiClientToken)));
typedi_1.Container.set(exports.RetrievePeopleFromApiUseCaseToken, new RetrievePlanetFromApiUseCase_2.RetrievePeopleFromApiUseCase(typedi_1.Container.get(exports.GetPeopleQueryHandlerToken)));
typedi_1.Container.set(exports.IPeopleRegistryServiceToken, new PeopleRegistryService_1.PeopleRegistryService(typedi_1.Container.get(exports.IPeopleCreationUseCaseToken), typedi_1.Container.get(exports.RetrievePeopleUseCaseToken), typedi_1.Container.get(exports.RetrievePeopleFromApiUseCaseToken)));
exports.default = typedi_1.Container;
